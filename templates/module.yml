---
AWSTemplateFormatVersion: "2010-09-09"
Description: A basic template
Parameters:
  MainRegion:
    Description: (Optional) create in main region
    Type: String
    Default: "None"
  SlackWebhookURL:
    Description: (Optional) send notify to slack webhook url
    Type: String
    Default: "None"
  AdminPrincipal:
    Type: String
    Description:
      (Optional) AWS Account Principal of the administrator account for assume role
    Default: "None"
  EnableCloudTrail:
    Description: (Optional) enable CloudTrail or not
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  CloudTrailS3BucketName:
    Description: (Optional) If you already have a cloudtrail s3 bucket
    Type: String
  EnableConfigService:
    Description: (Optional) enable config service or not
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  ConfigS3BucketName:
    Description: (Optional) If you already have a aws config s3 bucket
    Type: String
  ConfigSNSTopicArn:
    Description: (Optional) config sns topic arn.
    Type: String
    Default: "None"
  CofingRulePrefix:
    Type: String
    Description: (Optional) config rule name prefix
    Default: "None"
  ACMCertificatesDaysToExpiration:
    Description: (Optional) Checks whether ACM Certificates in your account are marked for expiration within the specified number of days.
    Type: Number
    Default: 0
  EnableEIPAttachedConfigRule:
    Description: (Optional) enable Checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  EnableEC2VolumeInuseCheckConfigRule:
    Description: (Optional) enable Checks whether EBS volumes are attached to EC2 instances.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  EnableIAMRootKeyCheckConfigRule:
    Description: (Optional) enable Checks whether the root user access key is available.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  EnableRootMFAEnabledConfigRule:
    Description: (Optional) enable Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  EnableRDSPublicAccessCheckConfigRule:
    Description: (Optional) enable Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  EnableSGOpenOnlyToAuthorizedPortsConfigRule:
    Description: (Optional) enable Checks whether any security groups with inbound 0.0.0.0/0 have TCP or UDP ports accessible. The rule is NON_COMPLIANT when a security group with inbound 0.0.0.0/0 has a port accessible which is not specified in the rule parameters.
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
  SGOpenAuthorizedTcpPorts:
    Description: Comma-separated list of TCP ports authorized to be open to 0.0.0.0/0. Ranges are defined by a dash; for example, "443,1020-1025".
    Type: String
    Default: '80,443'
  SGOpenAuthorizedUdpPorts:
    Description: Comma-separated list of UDP ports authorized to be open to 0.0.0.0/0. Ranges are defined by a dash; for example, "500,1020-1025".
    Type: String
    Default: '0'

Conditions: 
  CreateInMainRegion: !Or
    - !Equals [!Ref MainRegion, "None"]
    - !Equals [!Ref MainRegion, !Ref "AWS::Region"]
  CreateHealthEventNotify: !And
    - !Condition CreateInMainRegion
    - !Not [!Equals [!Ref SlackWebhookURL, "None"]]
  CreateAssumeRole: !And
    - !Condition CreateInMainRegion
    - !Not [!Equals [!Ref AdminPrincipal, "None"]]
  CreateCloudTrail: !And
    - !Condition CreateInMainRegion
    - !Equals [!Ref EnableCloudTrail, true]
  CreateCloudTrailS3Bucket: !And
    - !Condition CreateCloudTrail
    - !Equals [!Ref CloudTrailS3BucketName, ""]
  HasCloudTrailS3Bucket: !And
    - !Condition CreateCloudTrail
    - !Not [!Equals [!Ref CloudTrailS3BucketName, ""]]
  CreateConfig: !Equals [!Ref EnableConfigService, true]
  CreateConfigS3Bucket: !And
    - !Condition CreateConfig
    - !Equals [!Ref ConfigS3BucketName, ""]
  HasConfigS3Bucket: !And
    - !Condition CreateConfig
    - !Not [!Equals [!Ref ConfigS3BucketName, ""]]
  HasConfigSNSTopicArn: !And
    - !Condition CreateConfig
    - !Not [!Equals [!Ref ConfigSNSTopicArn, "None"]]
  HasCofingRulePrefix: !And
    - !Condition CreateConfig
    - !Not [!Equals [!Ref CofingRulePrefix, "None"]]
  CreateCloudTrailEnabledConfigRule: !And 
    - !Condition CreateConfig
    - !Condition CreateCloudTrail
  CreateACMExpirationCheckConfigRule: !And 
    - !Condition CreateConfig
    - !Not [!Equals [!Ref ACMCertificatesDaysToExpiration, 0]]
  CreateEIPAttachedConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableEIPAttachedConfigRule, true]
  CreateEC2VolumeInuseCheckConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableEC2VolumeInuseCheckConfigRule, true]
  CreateIAMRootKeyCheckConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableIAMRootKeyCheckConfigRule, true]
  CreateRootMFAEnabledConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableRootMFAEnabledConfigRule, true]
  CreateRDSPublicAccessCheckConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableRDSPublicAccessCheckConfigRule, true]
  CreateSGOpenOnlyToAuthorizedPortsCheckConfigRule: !And 
    - !Condition CreateConfig
    - !Equals [!Ref EnableSGOpenOnlyToAuthorizedPortsConfigRule, true]

Resources:
  ## Health Event Notify ##
  EventRule:
    Type: AWS::Events::Rule
    Condition: CreateHealthEventNotify
    Properties:
      Description: all health event
      EventPattern:
        source:
          - "aws.health"
      State: ENABLED
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Condition: CreateHealthEventNotify
    Properties:
      FunctionName:
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventRule"
          - "Arn"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: CreateHealthEventNotify
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Condition: CreateHealthEventNotify
    Properties:
      Code:  # required
        ZipFile: |
          import json
          import os
          from botocore.vendored import requests

          def handler(event, context):
              slack_webhook_url = os.environ['slack_webhook_url']

              # HTTP POST Request

              dict_headers = {'Content-type': 'application/json'}
              dict_payload = {
                  "username":"aws",
                  "icon_url":"https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-09-13/240092848416_0380058c9907aadf6079_72.png",
                  "attachments":[
                    {
                      "fallback":"",
                      "title": ":hammer_and_wrench: "+event['detail-type']+" | "+event['region']+" | Account: "+event['account'],
                      "text": "Event type code: \n"+event['detail']['eventTypeCode']+"\n\n"+event['detail']['eventDescription'][0]['latestDescription'],
                      "color": "warning",
                      "fields":[
                          {
                            "title":"Service",
                            "value":event['detail']['service'],
                            "short":False
                          }
                      ]
                    }
                ]
              }

              if 'affectedEntities' in event['detail']:
                  dict_payload['attachments'][0]['fields'].append({
                                "title":"Affected resource (showing 1 of "+str(len(event['detail']['affectedEntities']))+" affected)",
                                "value":event['detail']['affectedEntities'][0]['entityValue'],
                                "short":False
                              })

              rtn = requests.post(slack_webhook_url, data=json.dumps(dict_payload), headers=dict_headers)
              print(rtn.text)
              return {
                'statusCode': 200,
                'body': json.dumps('finished with success.')
            }
      Description: format event data and send message to slack channel
      Environment:
        Variables:
          slack_webhook_url: !Ref SlackWebhookURL
      Handler: index.handler  # required
      Role: !GetAtt LambdaExecutionRole.Arn  # required
      Runtime: python3.6  # required
      Timeout: 30

  ## CloudTrail ##
  CloudTrailS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateCloudTrailS3Bucket

  CloudTrailS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateCloudTrailS3Bucket
    Properties:
      Bucket: !Ref CloudTrailS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:GetBucketAcl"
            Resource: !Sub
              - arn:aws:s3:::${BucketName}
              - {BucketName: !Ref CloudTrailS3Bucket}
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "s3:PutObject"
            Resource: !Sub
              - arn:aws:s3:::${BucketName}/AWSLogs/${AWS::AccountId}/*
              - {BucketName: !Ref CloudTrailS3Bucket}
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: HasCloudTrailS3Bucket
    Properties:
      S3BucketName: !Ref CloudTrailS3BucketName
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      IsLogging: true

  CloudTrailWithS3:
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailS3BucketPolicy
    Condition: CreateCloudTrailS3Bucket
    Properties:
      S3BucketName: !Ref CloudTrailS3Bucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      IsLogging: true

  ## Assume Role ##
  AdministratorRole:
    Type: "AWS::IAM::Role"
    Condition: CreateAssumeRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AdminPrincipal
            Action:
              - sts:AssumeRole  # required
      Description: administrator role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: Role-Administrator

  ## Config ##
  ConfigS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateConfigS3Bucket

  ConfigS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateConfigS3Bucket
    Properties:
      Bucket: !Ref ConfigS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: "s3:GetBucketAcl"
            Resource: !Sub
              - arn:aws:s3:::${BucketName}
              - {BucketName: !Ref ConfigS3Bucket}
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: "s3:PutObject"
            Resource: !Sub
              - arn:aws:s3:::${BucketName}/AWSLogs/${AWS::AccountId}/Config/*
              - {BucketName : !Ref ConfigS3Bucket}
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control

  RoleForConfig:
    Type: "AWS::IAM::Role"
    Condition: CreateConfig
    Properties:
      Description: Allows Config to call AWS services and collect resource configurations on your behalf.
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action:
              - sts:AssumeRole  # required
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      Policies:
        - !If 
          - HasConfigSNSTopicArn
          - PolicyName: config-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    !Ref ConfigSNSTopicArn
          - !Ref "AWS::NoValue"

  ConfigRecorder:
    Type: "AWS::Config::ConfigurationRecorder"
    Condition: CreateConfig
    Properties:
      RecordingGroup: 
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt RoleForConfig.Arn
  
  ConfigDeliveryChannel:
    Type: "AWS::Config::DeliveryChannel"
    Condition: HasConfigS3Bucket
    Properties:
      S3BucketName: !Ref ConfigS3BucketName  # required
      SnsTopicARN: !If [ HasConfigSNSTopicArn, !Ref ConfigSNSTopicArn , !Ref "AWS::NoValue"]

  
  ConfigDeliveryChannelWithS3:
    Type: "AWS::Config::DeliveryChannel"
    DependsOn: ConfigS3BucketPolicy
    Condition: CreateConfigS3Bucket
    Properties:
      S3BucketName: !Ref ConfigS3Bucket  # required
      SnsTopicARN: !If [ HasConfigSNSTopicArn, !Ref ConfigSNSTopicArn , !Ref "AWS::NoValue"]

  CloudTrailEnabledConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateCloudTrailEnabledConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-CloudTrailEnabled
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether AWS CloudTrail is enabled in your AWS account.
      InputParameters:
        s3BucketName: !If [HasCloudTrailS3Bucket, !Ref CloudTrailS3BucketName, !Ref CloudTrailS3Bucket]
      Scope:
        ComplianceResourceTypes: 
          - AWS::CloudTrail::Trail
      Source:  # required
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED

  EIPAttachedConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateEIPAttachedConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-EIPAttached
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs.
      Scope:
        ComplianceResourceTypes: 
          - AWS::EC2::EIP
      Source:  # required
        Owner: AWS
        SourceIdentifier: EIP_ATTACHED

  EC2VolumeInuseCheckConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateEC2VolumeInuseCheckConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-EC2VolumeInuse
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether EBS volumes are attached to EC2 instances. Optionally checks if EBS volumes are marked for deletion when an instance is terminated.
      Scope:
        ComplianceResourceTypes: 
          - AWS::EC2::Volume
      Source:  # required
        Owner: AWS
        SourceIdentifier: EC2_VOLUME_INUSE_CHECK

  ACMExpirationCheckConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateACMExpirationCheckConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-ACMExpiration
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether ACM Certificates in your account are marked for expiration within the specified number of days. Certificates provided by ACM are automatically renewed. ACM does not automatically renew certificates that you import.
      InputParameters:
        daysToExpiration: !Ref ACMCertificatesDaysToExpiration
      Scope:
        ComplianceResourceTypes: 
          - AWS::ACM::Certificate
      Source:  # required
        Owner: AWS
        SourceIdentifier: ACM_CERTIFICATE_EXPIRATION_CHECK
  
  IAMRootKeyCheckConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateIAMRootKeyCheckConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-IAMRootKey
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether the root user access key is available. The rule is compliant if the user access key does not exist.
      Source:  # required
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK

  RootMFAEnabledConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateRootMFAEnabledConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-RootMFAEnabled
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.
      Source:  # required
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED

  RDSPublicAccessCheckConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateRDSPublicAccessCheckConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-RDSPublicAccess
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.
      Scope:
        ComplianceResourceTypes: 
          - AWS::RDS::DBInstance
      Source:  # required
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK

  SGOpenOnlyToAuthorizedPortsConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Condition: CreateSGOpenOnlyToAuthorizedPortsCheckConfigRule
    Properties:
      ConfigRuleName: !If 
                      - HasCofingRulePrefix
                      - !Sub
                        - ${CofingRulePrefix}-SGOpenOnlyToAuthorizedPorts
                        - { CofingRulePrefix: !Ref CofingRulePrefix } 
                      - !Ref "AWS::NoValue"
      Description: Checks whether any security groups with inbound 0.0.0.0/0 have TCP or UDP ports accessible. The rule is NON_COMPLIANT when a security group with inbound 0.0.0.0/0 has a port accessible which is not specified in the rule parameters.
      InputParameters: {authorizedTcpPorts: !Ref SGOpenAuthorizedTcpPorts, authorizedUdpPorts: !Ref SGOpenAuthorizedUdpPorts}
      Scope:
        ComplianceResourceTypes: 
          - AWS::EC2::SecurityGroup
      Source:  # required
        Owner: AWS
        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS