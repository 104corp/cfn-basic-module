---
AWSTemplateFormatVersion: "2010-09-09"
Description: A basic template
Parameters:
  SlackWebhookURL:
    Description:  send notify to slack webhook url
    Type: String
  CloudTrailS3BucketName:
    Description:  cloudtrail s3 bucket name
    Type: String
  ConfigS3BucketName:
    Description:  aws config s3 bucket name
    Type: String
  AdminAccountId:
    Type: String
    Description: AWS Account Id of the administrator account for assume role
    MaxLength: 12
    MinLength: 12
Conditions:
  CreateHealthEventNotify: !Not [!Equals [ !Ref SlackWebhookURL, "" ]]
  CreateAssumeRole: !Not [!Equals [ !Ref AdminAccountId, "" ]]
  CreateCloudTrailS3Bucket: !Equals [ !Ref CloudTrailS3BucketName, "" ]
  HasCloudTrailS3Bucket: !Not [!Equals [ !Ref CloudTrailS3BucketName, "" ]]
  CreateConfigS3Bucket: !Equals [ !Ref ConfigS3BucketName, "" ]
  HasConfigS3Bucket: !Not [!Equals [ !Ref ConfigS3BucketName, "" ]]
Resources:

## Health Event Notify ##

  EventRule:
    Type: AWS::Events::Rule
    Condition: CreateHealthEventNotify
    Properties:
      Description: all health event
      EventPattern:
        source:
          - "aws.health" # Example: "aws.ec2"
      State:  ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Condition: CreateHealthEventNotify
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRule"
          - "Arn"
          
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: CreateHealthEventNotify
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Condition: CreateHealthEventNotify
    Properties:
      Code: #required
        ZipFile: |
          import json
          import os
          from botocore.vendored import requests

          def handler(event, context):
              slack_webhook_url = os.environ['slack_webhook_url']

              # HTTP POST Request

              dict_headers = {'Content-type': 'application/json'}
              dict_payload = {
                  "username":"aws",
                  "icon_url":"https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-09-13/240092848416_0380058c9907aadf6079_72.png",
                  "attachments":[
                    {
                      "fallback":"",
                      "title": ":hammer_and_wrench: "+event['detail-type']+" | "+event['region']+" | Account: "+event['account'],
                      "text": "Event type code: \n"+event['detail']['eventTypeCode']+"\n\n"+event['detail']['eventDescription'][0]['latestDescription'],
                      "color": "warning",
                      "fields":[
                          {
                            "title":"Service",
                            "value":event['detail']['service'],
                            "short":False
                          },{
                            "title":"Affected resource (showing 1 of "+str(len(event['detail']['affectedEntities']))+" affected)",
                            "value":event['detail']['affectedEntities'][0]['entityValue'],
                            "short":False
                          }
                      ]
                    }
                ]
              }

              rtn = requests.post(slack_webhook_url, data=json.dumps(dict_payload), headers=dict_headers)
              print(rtn.text)
              return {
                'statusCode': 200,
                'body': json.dumps('finished with success.')
            }
      Description: format event data and send message to slack channel
      Environment: 
        Variables:
          slack_webhook_url: !Ref SlackWebhookURL
      Handler: index.handler #required
      Role: !GetAtt LambdaExecutionRole.Arn #required
      Runtime: python3.6 #required
      Timeout: 30

## CloudTrail ##

  CloudTrailS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateCloudTrailS3Bucket

  CloudTrailS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateCloudTrailS3Bucket
    Properties: 
      Bucket: !Ref CloudTrailS3Bucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck20150319
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:GetBucketAcl"
          Resource: !Sub
                      - arn:aws:s3:::${BucketName}
                      - {BucketName : !Ref CloudTrailS3Bucket}
        - Sid: AWSCloudTrailWrite20150319
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:PutObject"
          Resource: !Sub
                      - arn:aws:s3:::${BucketName}/AWSLogs/${AWS::AccountId}/*
                      - {BucketName : !Ref CloudTrailS3Bucket}
          Condition:
            StringEquals:
              "s3:x-amz-acl": bucket-owner-full-control

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailS3BucketPolicy
    Condition: CreateCloudTrailS3Bucket
    Properties:
      S3BucketName: !Ref CloudTrailS3Bucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      IsLogging: true

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: HasCloudTrailS3Bucket
    Properties:
      S3BucketName: !Ref CloudTrailS3BucketName
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      IsLogging: true

## Assume Role ##

  AdministratorRole:
    Type: "AWS::IAM::Role"
    Condition: CreateAssumeRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref AdminAccountId
          Action:
          - sts:AssumeRole #required
      Description: administrator role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: Role-Administrator

  OtterRole:
    Type: "AWS::IAM::Role"
    Condition: CreateAssumeRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref AdminAccountId
          Action:
          - sts:AssumeRole #required
      Description: otter role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: Role-Otter

## Config ##

  ConfigS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateConfigS3Bucket

  ConfigS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateConfigS3Bucket
    Properties: 
      Bucket: !Ref ConfigS3Bucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: AWSConfigBucketPermissionsCheck
          Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: "s3:GetBucketAcl"
          Resource: !Sub
                      - arn:aws:s3:::${BucketName}
                      - {BucketName : !Ref ConfigS3Bucket}
        - Sid: AWSConfigBucketDelivery
          Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: "s3:PutObject"
          Resource: !Sub
                      - arn:aws:s3:::${BucketName}/AWSLogs/${AWS::AccountId}/Config/*
                      - {BucketName : !Ref ConfigS3Bucket}
          Condition:
            StringEquals:
              "s3:x-amz-acl": bucket-owner-full-control

  ConfigRecorder:
    Type: "AWS::Config::ConfigurationRecorder"
    Properties:
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig #required
  
  ConfigDeliveryChannel:
    Type: "AWS::Config::DeliveryChannel"
    DependsOn: ConfigS3BucketPolicy
    Condition: CreateConfigS3Bucket
    Properties:
      S3BucketName: !Ref ConfigS3Bucket #required
  
  ConfigDeliveryChannel:
    Type: "AWS::Config::DeliveryChannel"
    Condition: HasConfigS3Bucket
    Properties:
      S3BucketName: !Ref ConfigS3BucketName #required

  ConfigRule:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: cloudtrail-enabled
      Description: Checks whether AWS CloudTrail is enabled in your AWS account.
      InputParameters:
        s3BucketName: !If [HasCloudTrailS3Bucket, !Ref CloudTrailS3BucketName, !Ref CloudTrailS3Bucket]
      Source: #required
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED

